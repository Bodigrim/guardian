name: Build Executables
description: Build inside our outside containers
inputs:
  ghc: 
    required: false
    description: GHC Version
    default: '9.0.2'
  cabal-project:
    required: false
    description: cabal.project file
    default: 'cabal-${{ runner.os }}.project'

runs:
  using: composite
  steps:
  - name: Installs pkg-config (macOS)
    if: ${{ runner.os == 'macOS' }}
    shell: bash
    run: "brew install pkg-config"
  - name: Setup Haskell
    uses: haskell/actions/setup@v2
    with:
      ghc-version: ${{ inputs.ghc }}
      cabal-version: 3.8.1.0
      install-stack: false
  - name: Cache Global Cabal
    uses: actions/cache@v3
    with:
      path: '~/.cabal/store'
      key: |
        cabal-global-${{ runner.os }}-${{ inputs.ghc }}-${{ hashFiles('cabal.project.freeze') }}
      restore-keys: |
        cabal-global-${{ runner.os }}-${{ inputs.ghc }}-
  - name: Cache dist-newstyle
    uses: actions/cache@v3
    with:
      path: 'dist-newstyle'
      key: |
        cabal-dist-${{ runner.os }}-${{ inputs.ghc }}-${{ hashFiles('cabal.project.freeze') }}-${{ hashFiles('*.cabal') }}-${{ hashFiles('**/*.hs') }}
      restore-keys: |
        cabal-dist-${{ runner.os }}-${{ inputs.ghc }}-${{ hashFiles('cabal.project.freeze', 'cabal-${{runner.os}}.project') }}-${{ hashFiles('*.cabal') }}-
        cabal-dist-${{ runner.os }}-${{ inputs.ghc }}-${{ hashFiles('cabal.project.freeze', 'cabal-${{runner.os}}.project') }}-
        cabal-dist-${{ runner.os }}-${{ inputs.ghc }}-
  - name: "cabal v2-update"
    shell: bash
    run: >
      cabal --project-file=${{inputs.cabal-project}}
      v2-update 'hackage.haskell.org,2023-02-13T02:00:06Z'
  - name: "Build"
    shell: bash
    run: >
      cabal --project-file=${{inputs.cabal-project}}
      v2-build --enable-tests
  - name: 'Collect binaries'
    env:
      bin-artifacts: "${{ github.workspace }}/bin-artifacts"
      artifact-name: "bins-${{ runner.os }}"
    shell: bash
    run: |
      set -euxo pipefail

      mkdir -p "${{env.bin-artifacts}}"
      cabal list-bin exe:guardian | while read -r FILE; do
        echo "COPYING: $(basename "${FILE}") (${FILE})"
        cp "${FILE}" "${{env.bin-artifacts}}/"
      done

      cabal list-bin guardian-test | while read -r FILE; do
        echo "COPYING: $(basename "${FILE}") (${FILE})"
        cp "${FILE}" "${{env.bin-artifacts}}/"
      done
  - uses: actions/upload-artifact@v3
    env:
      bin-artifacts: "${{ github.workspace }}/bin-artifacts"
      artifact-name: "bins-${{ runner.os }}"
    name: Upload Binary Artifacts
    with:
      name: ${{ env.artifact-name }}
      path: ${{ env.bin-artifacts }}
