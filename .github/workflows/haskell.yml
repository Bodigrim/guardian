name: Build & Test

on: 
  pull_request: 
    branches: ['**']
  push:
    branches: [main]
    tags:
    - "[0-9]+"
    - "[0-9]+.[0-9]+"
    - "[0-9]+.[0-9]+.[0-9]+"
    - "[0-9]+.[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:
    inputs:
      macOS:
        description: "Builds macOS binaries"
        type: boolean
        required: true
        default: false
      release_tag:
        description: "Release Tag"
        type: string
        required: false
        default: ""

jobs:
  fourmolu:
    name: Fourmolu
    runs-on: ubuntu-latest
    steps:
      # Note that you must checkout your code before running fourmolu/fourmolu-action
      - uses: actions/checkout@v2
      - uses: fourmolu/fourmolu-action@v6
        with:
          pattern: |
            src/**/*.hs
            src/**/*.hs-boot
            src/**/*.lhs
            app/**/*.hs
            app/**/*.hs-boot
            app/**/*.lhs
            test/**/*.hs
            test/**/*.hs-boot
            test/**/*.lhs

  build-macOS:
    name: Build (macOS)
    strategy:
      fail-fast: false
      matrix:
        os: [macOS]
        ghc: [9.0.2]
    env:
      cabal: "cabal --project-file=cabal-${{ matrix.os }}.project"
      bin-artifacts: "${{ github.workspace }}/bin-artifacts"
      artifact-name: "bins-macOS"
    runs-on: ${{ matrix.os }}-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup Haskell
      uses: haskell/actions/setup@v2
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: "3.8.1.0"
        install-stack: false
    - name: Cache Global Cabal
      uses: actions/cache@v3
      with:
        path: '~/.cabal/store'
        key: |
          cabal-global-${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
        restore-keys: |
          cabal-global-${{ matrix.os }}-${{ matrix.ghc }}-
    - name: Cache dist-newstyle
      uses: actions/cache@v3
      with:
        path: 'dist-newstyle'
        key: |
          cabal-dist-${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}-${{ hashFiles('*.cabal') }}-${{ hashFiles('**/*.hs') }}
        restore-keys: |
          cabal-dist-${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze', 'cabal-${{matrix.os}}.project') }}-${{ hashFiles('*.cabal') }}-
          cabal-dist-${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze', 'cabal-${{matrix.os}}.project') }}-
          cabal-dist-${{ matrix.os }}-${{ matrix.ghc }}-
    - name: "Update (not-linux)"
      run: '${{ env.cabal }} v2-update'
    - name: "Build (non-Linux)"
      run: '${{ env.cabal }} v2-build --enable-tests'
    - name: 'Collect binaries'
      run: |
        mkdir -p "bin-artifacts"
        cabal list-bin exe:guardian | while read -r BIN; do
          echo "Copying: ${BIN}"
          cp "${BIN}" "bin-artifacts" || echo "No Such."
        done

        cabal list-bin guardian-test | while read -r BIN; do
          echo "Copying: ${BIN}"
          cp "${BIN}" "bin-artifacts" || echo "No Such."
        done
    - uses: actions/upload-artifact@v3
      name: Upload Binary Artifacts
      with:
        name: ${{ env.artifact-name }}
        path: ${{ env.bin-artifacts }}

  build-linux:
    name: Build (Linux)
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        ghc: [9.0.2]
    container:
      image: fpco/alpine-haskell-stack:9.2.5
    env:
      cabal: "cabal --project-file=cabal-${{ matrix.os }}.project"
      CABAL_DIR: "${{github.workspace}}/.cabal"
      bin-artifacts: "bin-artifacts"
      artifact-name: "bins-linux"
    runs-on: ${{ matrix.os }}-latest
    steps:
    - name: Setup envvars
      run: |
        echo "${HOME}/.local/bin" >> "$GITHUB_PATH"
        echo "${HOME}/.cabal/bin" >> "$GITHUB_PATH"
        echo "${HOME}/.ghcup/bin" >> "$GITHUB_PATH"
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Installs missing deps"
      run: apk add sudo tar zstd xz
    - name: Cache Global Cabal
      uses: actions/cache@v3
      with:
        path: '${{ env.CABAL_DIR }}'
        key: |
          cabal-global-${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze', 'cabal-${{matrix.os}}.project') }}
        restore-keys: |
          cabal-global-${{ matrix.os }}-${{ matrix.ghc }}-
    - name: Cache dist-newstyle
      uses: actions/cache@v3
      with:
        path: 'dist-newstyle'
        key: |
          cabal-dist-${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze', 'cabal-${{matrix.os}}.project') }}-${{ hashFiles('*.cabal') }}-${{ hashFiles('**/*.hs') }}
        restore-keys: |
          cabal-dist-${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze', 'cabal-${{matrix.os}}.project') }}-${{ hashFiles('*.cabal') }}-
          cabal-dist-${{ matrix.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze', 'cabal-${{matrix.os}}.project') }}-
          cabal-dist-${{ matrix.os }}-${{ matrix.ghc }}-
    - name: Setup Haskell
      uses: haskell/actions/setup@v2
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: "3.8.1.0"
        install-stack: false
    - name: "cabal update"
      run: '${{ env.cabal }} v2-update'
    - name: Configure
      run: ${{ env.cabal }} v2-configure --enable-tests
    - name: Build all
      run: '${{ env.cabal }} v2-build'
    - name: 'Collect binaries'
      run: |
        set -euxo pipefail

        mkdir -p "${{env.bin-artifacts}}"
        cabal list-bin exe:guardian | while read -r FILE; do
          echo "COPYING: $(basename "${FILE}") (${FILE})"
          cp "${FILE}" "${{env.bin-artifacts}}/"
        done

        cabal list-bin guardian-test | while read -r FILE; do
          echo "COPYING: $(basename "${FILE}") (${FILE})"
          cp "${FILE}" "${{env.bin-artifacts}}/"
        done
    - uses: actions/upload-artifact@v3
      name: Upload Binary Artifacts
      with:
        name: ${{ env.artifact-name }}
        path: ${{ env.bin-artifacts }}

  test-macOS:
    name: Test (macOS)
    needs: [build-macOS]
    strategy:
      fail-fast: false
      matrix:
        os: [macOS]
        ghc: [9.0.2]
    env:
      cabal: "cabal --project-file=cabal-${{ matrix.os }}.project"
      artifact-name: "bins-macOS"
    runs-on: ${{ matrix.os }}-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      id: download
      with:
        name: ${{ env.artifact-name }}
    - name: Setup permission
      run: 'chmod +x "${{steps.download.outputs.download-path}}/guardian-test"'
    - name: Run tests
      run: |
        ${{steps.download.outputs.download-path}}/guardian-test

  test-linux:
    name: Test (Linux)
    needs: [build-linux]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        ghc: [9.0.2]
    env:
      cabal: "cabal --project-file=cabal-${{ matrix.os }}.project"
      artifact-name: "bins-linux"
    runs-on: ${{ matrix.os }}-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      id: download
      with:
        name: ${{ env.artifact-name }}
    - name: Setup permission
      run: 'chmod +x "${{steps.download.outputs.download-path}}/guardian-test"'
    - name: Run tests
      run: |
        ${{steps.download.outputs.download-path}}/guardian-test

  release:
    name: Release
    env:
      ghc: 9.0.2
      tag: "${{ github.event.inputs.release_tag }}"
    runs-on: ubuntu-latest
    needs: [build-linux, build-macOS]
    if: >
      github.event_name == 'push'
      &&
      startsWith(github.ref, 'refs/tags/')
      ||
      github.event_name == 'workflow_dispatch'
      &&
      github.event.inputs.release_tag != ''
    permissions:
      contents: write
    steps:
    - name: Setup envvars
      run: |
        if [ -n "${{env.tag}}" ]; then
          echo 'RELEASE=${{env.tag}}' >> "${GITHUB_ENV}"
        else
          echo 'RELEASE=${{github.ref_name}}' >> "${GITHUB_ENV}"
        fi
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download Artifact(s)
      id: download
      uses: actions/download-artifact@v3
      with:
        path: ${{ github.workspace }}/artifacts
    - name: Make Release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        ./scripts/make-release.sh "${RELEASE}" "${{ steps.download.outputs.download-path }}"

